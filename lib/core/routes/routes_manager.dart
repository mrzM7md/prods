import 'dart:io';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:go_router/go_router.dart';import 'package:prods/core/consts/app_routes.dart';import 'package:prods/core/widgets_services/convert_to_pdf_page.dart';import 'package:prods/features/control_panel/business/control_panel_cubit.dart';import 'package:prods/features/control_panel/business/sections/buys_cubit.dart';import 'package:prods/features/control_panel/business/sections/carts_cubit.dart';import 'package:prods/features/control_panel/business/sections/categories_cubit.dart';import 'package:prods/features/control_panel/business/sections/invoice_cubit.dart';import 'package:prods/features/control_panel/business/sections/products_cubit.dart';import 'package:prods/features/control_panel/features/products/presentation/add_edit_product_page.dart';import 'package:prods/features/control_panel/presentation/control_panel_page.dart';import 'package:prods/features/login/business/login_cubit.dart';import 'package:prods/features/login/presentation/login_page.dart';import 'package:prods/windows_splash_screen.dart';import '../services/services_locator.dart';class RoutesManager {  static final GoRouter router = GoRouter(      initialLocation: Platform.isWindows ? AppRoutes.splashScreenRouter : AppRoutes.loginRouter,      // errorPageBuilder: (context, state) {      //   return MaterialPage(      //     key: state.pageKey,      //     child: const Page404(),      //   );      // }      routes: [        GoRoute(            path: AppRoutes.splashScreenRouter,            name: AppRoutes.splashScreenRouter,            builder: (context, parentState) {              return const WindowsSplashScreen();            }        ),        GoRoute(            path: AppRoutes.test,            name: AppRoutes.test,          builder: (context, state) => PdfPage(),        ),        GoRoute(          name: AppRoutes.loginRouter,          path: AppRoutes.loginRouter,          builder: (context, parentState) {            return StreamBuilder<User?>(              stream: FirebaseAuth.instance.authStateChanges(),              builder: (context, snapshot) {                if (snapshot.connectionState == ConnectionState.waiting) {                  return const CircularProgressIndicator(); // عرض مؤشر التحميل أثناء انتظار حالة المصادقة                } else if (snapshot.hasData) {                  return MultiBlocProvider(                    providers: [                      BlocProvider.value(                        value: sl<ControlPanelCubit>(),                      ),                      BlocProvider.value(                        value: sl<CategoriesCubit>(),                      ),                      BlocProvider.value(                        value: sl<ProductsCubit>(),                      ),                      BlocProvider.value(                        value: sl<CartsCubit>(),                      ),                      BlocProvider.value(                        value: sl<InvoiceCubit>(),                      ),                      BlocProvider.value(                        value: sl<BuysCubit>(),                      ),                    ],                    child: const ControlPanelPage(),                  );                   // المستخدم مسجل الدخول، توجيهه إلى الصفحة الرئيسية                } else {                  return MultiBlocProvider(                    providers: [                      BlocProvider.value(                        value: sl<LoginCubit>(),                      ),                    ],                    child: const LoginPage(),                  );                }              },            );          },        ),        GoRoute(          name: AppRoutes.controlPanelRouter,          path: AppRoutes.controlPanelRouter,          builder: (context, parentState) {            return MultiBlocProvider(              providers: [                BlocProvider.value(                  value: sl<ControlPanelCubit>(),                ),                BlocProvider.value(                  value: sl<CategoriesCubit>(),                ),                BlocProvider.value(                  value: sl<ProductsCubit>(),                ),                BlocProvider.value(                  value: sl<CartsCubit>(),                ),                BlocProvider.value(                  value: sl<InvoiceCubit>(),                ),                BlocProvider.value(                  value: sl<BuysCubit>(),                ),              ],              child: const ControlPanelPage(),            );          },          routes: [            // add GoRoute code to allow me to get optional parameter by user, param named "id"            GoRoute(              name: AppRoutes.addEditProductRouter,              path: "${AppRoutes.addEditProductRouter}/:id",              builder: (context, state) {                String? productId = state.pathParameters['id'];                return MultiBlocProvider(                  providers: [                    BlocProvider.value(                      value: sl<ProductsCubit>(),                    ),                    BlocProvider.value(                      value: sl<CategoriesCubit>(),                    ),                  ],                  child: AddEditProductPage(productId: productId,),                );              },            ),          ]        ),      ]);}